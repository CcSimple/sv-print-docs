import{_ as o,W as p,X as c,$ as t,a0 as n,Z as a,a1 as e,D as d}from"./framework-741228ed.js";const i={},l=t("h3",{id:"模板对象",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#模板对象","aria-hidden":"true"},"#"),n(" 模板对象")],-1),r=t("code",null,"浏览器打印",-1),u=t("code",null,"直接打印/绕过浏览器弹窗打印",-1),k={href:"https://gitee.com/CcSimple/electron-hiprint",target:"_blank",rel:"noopener noreferrer"},m=t("code",null,"“打印设计”",-1),v=t("code",null,"“打印预览”",-1),b=t("code",null,"“导出PDF”",-1),g=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 新建模板 参数见下方表格</span>
<span class="token keyword">let</span> hiprintTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hiprint<span class="token punctuation">.</span>PrintTemplate</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将模板设计到指定容器中</span>
<span class="token comment">// &#39;#hiprint-printTemplate&#39; ==&gt; jQuery(&#39;#hiprint-printTemplate&#39;) ==&gt; $(&#39;#hiprint-printTemplate&#39;)</span>
hiprintTemplate<span class="token punctuation">.</span><span class="token function">design</span><span class="token punctuation">(</span><span class="token string">&quot;#hiprint-printTemplate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印数据,仅 “打印预览/浏览器打印/直接打印/导出PDF 时才会处理。</span>
<span class="token comment">// 其中 “text” 是一个元素的 “字段名(field)”</span>
<span class="token keyword">let</span> printData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;这是打印时显示的文本&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 打印预览 --&gt; 返回实际打印的 html 内容</span>
hiprintTemplate<span class="token punctuation">.</span><span class="token function">getHtml</span><span class="token punctuation">(</span>printData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 浏览器打印 --&gt; 需要用户 手动 点击打印按钮 !!! “无法监听“ 用户是否点了打印</span>
hiprintTemplate<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>printData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 直接打印 --&gt; 有回调是否将“打印任务” “发生成功” 给打印机</span>
hiprintTemplate<span class="token punctuation">.</span><span class="token function">print2</span><span class="token punctuation">(</span>printData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">printer</span><span class="token operator">:</span> <span class="token string">&quot;打印机名称&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;打印任务名称&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 导出PDF</span>
hiprintTemplate<span class="token punctuation">.</span><span class="token function">toPdf</span><span class="token punctuation">(</span>printData<span class="token punctuation">,</span> <span class="token string">&quot;pdf名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义设计使用示例" tabindex="-1"><a class="header-anchor" href="#自定义设计使用示例" aria-hidden="true">#</a> 自定义设计使用示例</h3>`,2),h={class:"custom-container tip"},q=t("p",{class:"custom-container-title"},"注意",-1),f={href:"https://www.npmjs.com/package/@sv-print/hiprint",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 这是 &quot;可拖拽元素&quot; 容器 拖拽它到 &quot;拖拽设计器&quot; 进行设计 --&gt;</span>
  <span class="token comment">&lt;!-- !!! &quot;可拖拽元素&quot; 有两种 方式 !!! --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>这是方式1,完全自定义元素样式<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hiprintEpContainer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 必须包含 &quot;ep-draggable-item&quot; class --&gt;</span>
    <span class="token comment">&lt;!-- defaultModule.text ==&gt; provider 中 对应的 tid --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ep-draggable-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultModule.text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>这是方式2,仅显示自定义元素的标题<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hiprintEpContainer2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 这是 &quot;多面板&quot; 容器 点击切换面板 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hiprint-printPagination<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 这是 &quot;拖拽设计器&quot; 容器 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hiprint-printTemplate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 这是 &quot;元素参数设置&quot; 容器 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PrintElementOptionSetting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// &lt;!--【必须】在index.html 文件中添加打印所需样式(此cdn可能不稳定):--&gt;</span>
<span class="token comment">// &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;print&quot; href=&quot;https://cdn.jsdelivr.net/npm/@sv-print/hiprint@latest/dist/print-lock.css&quot;&gt;</span>
<span class="token comment">// &lt;!-- 可以调整成 相对链接/自有链接, 【重要】名称需要一致 【print-lock.css】--&gt;</span>
<span class="token comment">// &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;print&quot; href=&quot;/print-lock.css&quot;&gt;</span>

<span class="token comment">// defaultElementTypeProvider -&gt; 默认 provider ==&gt; 可拖拽元素提供者 【关键信息 可拖拽元素唯一标识 &quot;tid&quot;】</span>
<span class="token comment">// &quot;可拖拽元素&quot; 方式1 就需要用到这个 &quot;tid&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> hiprint<span class="token punctuation">,</span> defaultElementTypeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@sv-print/hiprint&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">hiprintTemplate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 渲染部分都是填充到 对应 &quot;容器&quot; 中， 所以肯定需要能够获取到对应 DOM 后 操作。</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 初始化 provider , 才能让 &quot;可拖拽元素&quot; 可正常拖拽 【因为要先去处理 provider 中的 &quot;tid&quot;】</span>
      hiprint<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">defaultElementTypeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 渲染 &quot;可拖拽元素&quot; 方式1, 包含 &quot;tid&quot; 元素 class 必须包含 &quot;ep-draggable-item&quot;</span>
      hiprint<span class="token punctuation">.</span>PrintElementTypeManager<span class="token punctuation">.</span><span class="token function">buildByHtml</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.ep-draggable-item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 渲染 &quot;可拖拽元素&quot; 方式2, 指定 &quot;可拖拽元素&quot; 容器</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.hiprintEpContainer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// // 有时可能是第二次进入此页面, 所以需要先清空 &quot;可拖拽元素&quot; 容器</span>
      <span class="token comment">// hiprintEpContainer =&gt; &quot;可拖拽元素&quot; 容器</span>
      <span class="token comment">// defaultModule =&gt; provider 对应的 ElementTypes --&gt; context.addPrintElementTypes(&quot;defaultModule&quot;,[])</span>
      <span class="token comment">// 有时如果你发现你页面出现重复的 &quot;可拖拽元素&quot; 元素, 那么你需要 先移除&quot;旧&quot;的 ElementTypes --&gt; context.removePrintElementTypes(&quot;defaultModule&quot;);</span>
      hiprint<span class="token punctuation">.</span>PrintElementTypeManager<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&#39;.hiprintEpContainer&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 有时可能是第二次进入此页面, 所以需要先清空 &quot;拖拽设计器&quot; 容器</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#hiprint-printTemplate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建模板对象</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hiprintTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hiprint<span class="token punctuation">.</span>PrintTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">// &quot;初始模板 json&quot;</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// &quot;元素参数设置&quot; 容器</span>
        <span class="token literal-property property">settingContainer</span><span class="token operator">:</span> <span class="token string">&quot;#PrintElementOptionSetting&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// &quot;多面板&quot; 容器</span>
        <span class="token comment">// 实现多面板， 需要在页面添加一个 &lt;div class=&quot;hiprint-printPagination&quot;/&gt;</span>
        <span class="token comment">// 不添加, 可不用下方代码, 如果没有对应 容器 写了也没用</span>
        <span class="token literal-property property">paginationContainer</span><span class="token operator">:</span> <span class="token string">&quot;.hiprint-printPagination&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将模板渲染到 &quot;拖拽设计器&quot; 容器 中</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hiprintTemplate<span class="token punctuation">.</span><span class="token function">design</span><span class="token punctuation">(</span><span class="token string">&quot;#hiprint-printTemplate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果你只想打印, 那么 创建模板 对象 参数只需要 &quot;初始模板 json&quot; 然后调用 print/print2 即可</span>
      <span class="token comment">// let printData = { text: &quot;这是打印时显示的文本&quot; };</span>
      <span class="token comment">// this.hiprintTemplate.print(printData)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板参数" tabindex="-1"><a class="header-anchor" href="#模板参数" aria-hidden="true">#</a> 模板参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>template</td><td><code>json</code></td><td>模板 json 数据</td><td></td></tr><tr><td>settingContainer</td><td><code>string</code></td><td>设置项对应的 html 容器</td><td>如: <code>&lt;div id=&quot;PrintElementOptionSetting&quot;/&gt;</code></td></tr><tr><td>paginationContainer</td><td><code>string</code></td><td>多面板容器(需要在页面添加对应 div )</td><td>如: <code>&lt;div class=&quot;hiprint-printPagination&quot;/&gt;</code></td></tr><tr><td>fields</td><td><code>array</code></td><td>fields 存在 元素字段则显示为下拉框显示 <br> fields 不存在 元素字段则为输入框显示</td><td><code>此处设置为全局设置元素字段数据源，优先级低于 元素类型设置数据源</code></td></tr><tr><td>onImageChooseClick</td><td><code>(target)=&gt;{}</code> )</td><td>图片地址选择回调</td><td><code>target.refresh(url,options)</code><br> <code>target.getValue()</code></td></tr><tr><td>fontList</td><td><code>array</code></td><td>自定义下列选择的 字体列表</td><td><code>hiprintTemplate.setFontList([])</code><br>或元素中设置<br><code>options.fontList: []</code></td></tr><tr><td>dataMode</td><td><code>number</code></td><td>onDataChanged 返回 json 格式 1:getJson 其他：getJsonTid 默认 1</td><td></td></tr><tr><td>onDataChanged</td><td><code>(type, json)=&gt;{}</code></td><td>模板发生改变时回调, 有些修改可能没有回调</td><td>新增、移动、删除、修改(参数调整)、大小、旋转等等</td></tr><tr><td>onUpdateError</td><td><code>(e)=&gt;{}</code></td><td>hiprintTemplate.update(json) 更新失败时回调</td><td>撤销重做使用的就是 update</td></tr></tbody></table><h3 id="常用-api" tabindex="-1"><a class="header-anchor" href="#常用-api" aria-hidden="true">#</a> 常用 Api</h3><table><thead><tr><th>API</th><th>参数</th><th>说明</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td>getJson</td><td><code>无</code></td><td>返回 <mark>非配置版</mark> 模板 json</td><td><code>json</code></td><td>参数较完整</td></tr><tr><td>getJsonTid</td><td><code>无</code></td><td>返回 <mark>配置版</mark> <code>(把一些参数存在 provider 中,所以需要先 init 对应 provider)</code> 模板 json</td><td><code>json</code></td><td>参数较少</td></tr><tr><td>clear</td><td><code>无</code></td><td>清空模板</td><td><code>无</code></td><td></td></tr><tr><td>rotatePaper</td><td><code>无</code></td><td>旋转纸张 -&gt; <code>宽 =&gt; 高;高 =&gt; 宽</code></td><td><code>无</code></td><td></td></tr><tr><td>getOrient</td><td><code>无</code></td><td>获取纸张方向</td><td><code>1</code>--纵向 <br> <code>2</code>--横向</td><td></td></tr><tr><td>setPaper</td><td><code>width,height</code></td><td>设置模板纸张大小<br><code>setPaper(210,297)</code><br> 内置纸张大小 <mark>只有 A1-A8 和 B1-B8</mark><br><code>setPaper(&#39;A4&#39;)</code></td><td></td><td></td></tr><tr><td>zoom</td><td><code>scaleValue,save</code></td><td>缩放设计纸张<br><code>zoom(1.2)</code> <br> 缩放并保存(<mark>打印时也会缩放</mark>)<br><code>zoom(1.2,true)</code></td><td></td><td></td></tr><tr><td>design</td><td><code>string</code></td><td>将模板渲染到指定容器中进行拖拽设计 <br> <code>design(&quot;#hiprint-printTemplate&quot;)</code></td><td><code>无</code></td><td><mark>调用之前需要能够获取到对应 DOM 容器</mark></td></tr><tr><td>update</td><td><code>json</code></td><td>根据 json 模板更新 <br> <code>update(json)</code></td><td><code>无</code></td><td><mark>可能更新失败</mark>可查看控制台 log</td></tr><tr><td>setElsAlign</td><td><code>string</code></td><td>设置多选元素 左对齐 <br> <code>setElsAlign(&#39;left&#39;)</code></td><td><code>无</code></td><td><code>left/vertical/right/top/horizontal/bottom/distributeHor/distributeVer</code></td></tr><tr><td>setElsSpace</td><td><code>number,isHor</code></td><td>设置多选元素 垂直间距 10 <br> <code>setElsSpace(10)</code> <br> 水平间距 10 <br> <code>setElsSpace(10,true)</code></td><td><code>无</code></td><td></td></tr><tr><td>updateOption</td><td><code>key,value</code></td><td>设置多选元素的 字体大小 12 <br> <code>updateOption(&#39;fontSize&#39;,12)</code> <br> 字体加粗 <br> <code>updateOption(&#39;fontWeight&#39;, &#39;bolder&#39;);</code></td><td><code>无</code></td><td>支持的参数在控制台输入 <code>window.HIPRINT_CONFIG</code> 查看 <br> 如: <code>window.HIPRINT_CONFIG.text.tabs[0].options</code></td></tr><tr><td>getHtml</td><td><code>data,options,callback</code></td><td>获取打印 html <br> <code>getHtml({})</code> <br> 批量获取打印 html <br> <code>getHtml([{},{}])</code> <br> 定义打印左上偏移量 <br> <code>getHtml(data,{leftOffset:-1,topOffset:-1 })</code><mark>将覆盖面板偏移设置</mark> <br></td><td><code>html</code></td><td><code>paperNumberToggleInEven</code><br><br><code>leftOffset</code><br><br><code>topOffset</code></td></tr><tr><td>print</td><td><code>data,options</code></td><td>浏览器打印<br> <code>print({})</code><br>批量打印 <br> <code>print([{},{},{},{}])</code><br> 定义打印左上偏移量 <br> <code>print({},{leftOffset:-1,topOffset:-1 })</code><mark>将覆盖面板偏移设置</mark> <br> 浏览器打印回调 <br> <code>print({},{},{callback:()=&gt;{console.log(&#39;浏览器打印窗口已打开&#39;)}})</code></td><td><code>无</code></td><td><code>paperNumberToggleInEven</code><br><br><code>leftOffset</code><br><br><code>topOffset</code></td></tr><tr><td>print2</td><td><code>data,options</code></td><td>浏览器打印<br> <code>print2({})</code><br>批量打印 <br> <code>print2([{},{},{},{}])</code><br> 定义打印左上偏移量 <br> <code>print2({},{leftOffset:-1,topOffset:-1 })</code><mark>将覆盖面板偏移设置</mark> <br></td><td><code>无</code></td><td><code>paperNumberToggleInEven</code><br><br><code>leftOffset</code><br><br><code>topOffset</code></td></tr><tr><td>on</td><td><code>eventName,callback</code></td><td><mark>直接打印</mark>回调<br>打印成功<br><code>on(&#39;printSuccess&#39;, function (data) { })</code> <br>打印失败<br><code>on(&#39;printError&#39;, function (data) { })</code></td><td><code>无</code></td><td></td></tr><tr><td>toPdf</td><td><code>data,fileName,options</code></td><td>导出 pdf <br> <code>toPdf({},&quot;测试导出&quot;)</code><br>导出参数<mark>scale 越大 pdf 越清晰，文件越大 性能越差 默认 2</mark><br><code>toPdf({},&quot;测试导出&quot;,{scale:4})</code><br> 定义打印左上偏移量 <br> <code>print({},{leftOffset:-1,topOffset:-1 })</code><mark>将覆盖面板偏移设置</mark> <br></td><td><code>$.Deferred()</code></td><td><code>scale</code><br><br><code>isDownload</code></td></tr><tr><td>getPrinterList</td><td><code>无</code></td><td>返回 连接 <mark>打印客户端</mark> 时获取到的打印机列表</td><td><code>array</code></td><td>刷新获取打印机列表<br><mark>这是异步的,需要已连接打印客户端</mark> <br> <code>hiprint.refreshPrinterList((list) =&gt; {})</code></td></tr><tr><td>setFields</td><td><code>array</code></td><td>设置字段列表 <br><code>setFields([{field:&#39;name&#39;,text:&#39;名称&#39;}])</code></td><td><code>无</code></td><td><mark>此处设置为全局设置元素字段数据源，优先级低于 元素类型设置数据源</mark></td></tr><tr><td>setFontList</td><td><code>array</code></td><td>设置可选字体列表 <br><code>setFontList([{value:&#39;SourceHanSansCN-Normal&#39;,title:&#39;思源黑体&#39;}])</code></td><td><code>无</code></td><td><mark>需要本机已安装该字体</mark></td></tr></tbody></table><h3 id="其他-api" tabindex="-1"><a class="header-anchor" href="#其他-api" aria-hidden="true">#</a> 其他 Api</h3><table><thead><tr><th>API</th><th>参数</th><th>说明</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td>undo</td><td><code>无</code></td><td>撤销</td><td><code>无</code></td><td></td></tr><tr><td>redo</td><td><code>无</code></td><td>重做</td><td><code>无</code></td><td></td></tr><tr><td>copyJson</td><td><code>无</code></td><td>复制元素</td><td><code>[元素]</code></td><td><mark>仅 sv-print 支持</mark></td></tr><tr><td>cutJson</td><td><code>无</code></td><td>剪切元素</td><td><code>无</code></td><td><mark>仅 sv-print 支持</mark></td></tr><tr><td>canPaste</td><td><code>无</code></td><td>能否粘贴</td><td><code>boolean</code></td><td><mark>仅 sv-print 支持</mark></td></tr><tr><td>getPrintStyle</td><td><code>index</code></td><td>获取打印打印样式<br><code>panels</code>对应下标, 默认 0</td><td><code>string</code></td><td>查看打印样式是否正常<code>纸张大小</code>,<code>纸张方向</code></td></tr><tr><td>getPaperType</td><td><code>index</code></td><td>获取打印纸张类型<br><code>panels</code>对应下标, 默认 0</td><td><code>string</code></td><td></td></tr><tr><td>addPrintPanel</td><td><code>options</code></td><td>新增面板<br><code>addPrintPanel({ width: 100, height: 130, paperFooter: 340, paperHeader: 10 })</code></td><td><code>panel</code></td><td>多面板操作</td></tr><tr><td>printByHtml</td><td><code>html</code></td><td>打印 html<br><code>printByHtml($(&#39;#Id&#39;).html())</code></td><td><code>无</code></td><td></td></tr><tr><td>getElementByName</td><td><code>elementName,panelIndex</code></td><td>获取元素 <code>options.name == &#39;testName&#39;</code> 的打印组件<br><code>getElementByName(testName)</code></td><td><code>array</code></td><td><mark>panelIndex</mark>多面板的下标 默认 0</td></tr></tbody></table>`,7);function _(P,T){const s=d("ExternalLinkIcon");return p(),c("div",null,[l,t("p",null,[n("模板核心对象。创建它的实例，以实现"),r,n("，"),u,n("("),t("a",k,[n("直接打印机客户端"),a(s)]),n(")，"),m,n("，"),v,n("和"),b,n("的功能")]),g,t("div",h,[q,t("p",null,[n("这里是使用 "),t("a",f,[n("核心包 @sv-print/hiprint"),a(s)]),n(" 的示例。是没有组件的方式。适用于想自定义 UI 的开发者。")])]),y])}const x=o(i,[["render",_],["__file","template.html.vue"]]);export{x as default};
