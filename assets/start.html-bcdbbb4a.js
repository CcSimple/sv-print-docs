import{_ as p,W as e,X as o,$ as n,a0 as s,Y as t,a1 as c,D as i}from"./framework-e97450c6.js";const l={},u=n("h3",{id:"❓-为什么没开源",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#❓-为什么没开源","aria-hidden":"true"},"#"),s(" ❓ 为什么没开源")],-1),r=n("p",null,"起初本来是想开源的， 然而一次不经意发现开源的 vue-plugin-hiprint 越来越多的第三方版本。 于是 sv-print 没有开源的后续了~",-1),k={class:"custom-container warning"},d=n("p",{class:"custom-container-title"},"温馨提示",-1),v={href:"https://jquery.com/",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),s(" 安装")],-1),g={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"温馨提示",-1),q={href:"http://hiprint.io/docs/start",target:"_blank",rel:"noopener noreferrer"},h=c(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i @sv<span class="token operator">-</span>print<span class="token operator">/</span>hiprint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="引入打印样式" tabindex="-1"><a class="header-anchor" href="#引入打印样式" aria-hidden="true">#</a> 引入打印样式</h3><div class="custom-container danger"><p class="custom-container-title">重要提醒</p><p>需要复制【<mark>node_modules/@sv-print/hiprint/dist/print-lock.css</mark>】到开发资源目录。<br> 例如: Vue 项目的 <mark>public</mark> 目录。<br> 假如你部署的网站是: <code>https://www.abcd.com/index.html</code> 那么确保 <code>https://www.abcd.com/print-lock.css</code> 能够正常访问</p></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- &quot;可拖拽元素&quot; 容器 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>这是方式2,仅显示自定义元素的标题<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hiprintEpContainer2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 这是 &quot;多面板&quot; 容器 点击切换面板 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hiprint-printPagination<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 这是 &quot;拖拽设计器&quot; 容器 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hiprint-printTemplate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 这是 &quot;元素参数设置&quot; 容器 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PrintElementOptionSetting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 这里和 vue-plugin-hiprint 使用方式一样。</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> autoConnect<span class="token punctuation">,</span> disAutoConnect<span class="token punctuation">,</span> hiprint<span class="token punctuation">,</span> defaultElementTypeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@sv-print/hiprint&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">hiprintTemplate</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 渲染部分都是填充到 对应 &quot;容器&quot; 中， 所以肯定需要能够获取到对应 DOM 后 操作。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 初始化 provider , 才能让 &quot;可拖拽元素&quot; 可正常拖拽 【因为要先去处理 provider 中的 &quot;tid&quot;】</span>
      hiprint<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">defaultElementTypeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 渲染 &quot;可拖拽元素&quot; 方式2, 指定 &quot;可拖拽元素&quot; 容器</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.hiprintEpContainer2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // 有时可能是第二次进入此页面, 所以需要先清空 &quot;可拖拽元素&quot; 容器</span>
      <span class="token comment">// hiprintEpContainer2 =&gt; &quot;可拖拽元素&quot; 容器</span>
      <span class="token comment">// defaultModule =&gt; provider 对应的 ElementTypes --&gt; context.addPrintElementTypes(&quot;defaultModule&quot;,[])</span>
      <span class="token comment">// 有时如果你发现你页面出现重复的 &quot;可拖拽元素&quot; 元素, 那么你需要 先移除&quot;旧&quot;的 ElementTypes --&gt; context.removePrintElementTypes(&quot;defaultModule&quot;);</span>
      hiprint<span class="token punctuation">.</span>PrintElementTypeManager<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;.hiprintEpContainer2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 有时可能是第二次进入此页面, 所以需要先清空 &quot;拖拽设计器&quot; 容器</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#hiprint-printTemplate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建模板对象</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hiprintTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hiprint<span class="token punctuation">.</span>PrintTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">// &quot;初始模板 json&quot;</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// &quot;元素参数设置&quot; 容器</span>
        <span class="token literal-property property">settingContainer</span><span class="token operator">:</span> <span class="token string">&quot;#PrintElementOptionSetting&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// &quot;多面板&quot; 容器</span>
        <span class="token comment">// 实现多面板， 需要在页面添加一个 &lt;div class=&quot;hiprint-printPagination&quot;/&gt;</span>
        <span class="token comment">// 不添加, 可不用下方代码, 如果没有对应 容器 写了也没用</span>
        <span class="token literal-property property">paginationContainer</span><span class="token operator">:</span> <span class="token string">&quot;.hiprint-printPagination&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将模板渲染到 &quot;拖拽设计器&quot; 容器 中</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hiprintTemplate<span class="token punctuation">.</span><span class="token function">design</span><span class="token punctuation">(</span><span class="token string">&quot;#hiprint-printTemplate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果你只想打印, 那么 创建模板 对象 参数只需要 &quot;初始模板 json&quot; 然后调用 print/print2 即可</span>
      <span class="token keyword">let</span> printData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;这是打印时显示的文本&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hiprintTemplate<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>printData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function y(_,f){const a=i("ExternalLinkIcon");return e(),o("div",null,[u,r,n("div",k,[d,n("p",null,[s("hiprint 底层是基于 "),n("a",v,[s("jQuery"),t(a)]),s(" 实现的。")])]),m,n("div",g,[b,n("p",null,[s("这里以 @sv-print/hiprint 使用为例。 若想使用官网的版本，请参考 "),n("a",q,[s("官网文档"),t(a)])])]),h])}const x=p(l,[["render",y],["__file","start.html.vue"]]);export{x as default};
